<?php
/*+***********************************************************************************
 * The contents of this file are subject to the vtiger CRM Public License Version 1.0
 * ("License"); You may not use this file except in compliance with the License
 * The Original Code is:  vtiger CRM Open Source
 * The Initial Developer of the Original Code is vtiger.
 * Portions created by vtiger are Copyright (C) vtiger.
 * All Rights Reserved.
 *************************************************************************************/

ini_set('include_path', ini_get('include_path'). PATH_SEPARATOR . '../..');

require_once 'include/utils/utils.php';
require_once 'include/utils/CommonUtils.php';
require_once 'config.inc.php';
require_once 'include/Webservices/Utils.php';
require_once 'modules/Users/Users.php';
require_once 'include/Webservices/State.php';
require_once 'include/Webservices/OperationManager.php';
require_once 'include/Webservices/SessionManager.php';
require_once 'include/Webservices/WebserviceField.php';
require_once 'include/Webservices/EntityMeta.php';
require_once 'include/Webservices/VtigerWebserviceObject.php';
require_once 'include/Webservices/VtigerCRMObject.php';
require_once 'include/Webservices/VtigerCRMObjectMeta.php';
require_once 'include/Webservices/DataTransform.php';
require_once 'include/Webservices/WebServiceError.php';
require_once 'include/utils/UserInfoUtil.php';
require_once 'include/Webservices/ModuleTypes.php';
require_once 'include/utils/VtlibUtils.php';
require_once 'include/logging.php';
require_once 'include/Webservices/WebserviceEntityOperation.php';
require_once "include/language/$default_language.lang.php";
require_once 'include/Webservices/Retrieve.php';
require_once 'include/Webservices/Update.php';
require_once 'modules/Emails/mail.php';
require_once 'modules/Users/Users.php';
require_once 'modules/com_vtiger_workflow/VTSimpleTemplate.inc';
require_once 'modules/com_vtiger_workflow/VTEntityCache.inc';
require_once 'modules/com_vtiger_workflow/VTWorkflowUtils.php';
require_once 'modules/com_vtiger_workflow/include.inc';

function vtRunTaskJob($adb) {
	global $logbg;
	$util = new VTWorkflowUtils();
	$adminUser = $util->adminUser();
	$logbg->debug('WF Cron:: Start processing tasks from the queue');
	$cbmq = coreBOS_MQTM::getInstance();
	$tm = new VTTaskManager($adb);
	while ($msg = $cbmq->getMessage('wfTaskQueueChannel', 'wftaskqueue', 'wftaskqueue')) {
		$msginfo  = json_decode($msg['information'], true);
		$taskId   = $msginfo['taskId'];
		$entityId = $msginfo['entityId'];
		$logbg->debug('WF Cron:: Task '.$taskId.' will be executed with entityId: '.$entityId);
		$task = $tm->retrieveTask($taskId);
		if (empty($task)) { //If task is not there then continue
			$logbg->debug('WF Cron:: Task: '.$taskId.' could not be found');
			continue;
		}
		list($moduleId, $crmId) = explode('x', $entityId);
		$res = $adb->pquery('select deleted from vtiger_crmobject where crmid=?', array($crmId));
		if ($adb->num_rows($res) == 0) {
			$logbg->debug('WF Cron:: CRMID '.$crmId.' was totally deleted');
			continue;
		} else {
			$isDeleted = $adb->query_result($res, 0, 0);
		}
		$entity = new VTWorkflowEntity($adminUser, $entityId, $isDeleted, true);
		$entityCache = new VTEntityCache($adminUser);
		$wsModuleName = $entity->getModuleName();
		if (!vtlib_isModuleActive($wsModuleName)) {
			$logbg->debug('WF Cron:: Module is not active: '.$wsModuleName);
			continue;
		}
		if (empty($task->test)
			|| (isset($task->reevaluate) && $task->reevaluate==0)
			|| ((!isset($task->reevaluate) || $task->reevaluate==1) && $task->evaluate($entityCache, $entity->getId()))
		) {
			$logbg->debug('WF Cron:: Task '.$taskId.' will call function doTask with entityId: '.$entityId);
			try {
				$task->startTask($entity);
				if (!empty($msginfo['context'])) {
					$entity->WorkflowContext = $msginfo['context'];
					if (!empty($msginfo['context']['__WorkflowID'])) {
						$entity->WorkflowID = $msginfo['context']['__WorkflowID'];
					}
				} else {
					$entity->WorkflowContext = [];
				}
				$task->doTask($entity);
				$task->endTask($entity);
				$logbg->debug('WF Cron:: Task '.$taskId.' executed with success the function doTask with entityId: '.$entityId);
			} catch (Exception $e) {
				$logbg->debug('WF Cron:: Task '.$taskId.' executed with FAILURE the function doTask with entityId: '.$entityId);
				$logbg->debug($e->getMessage());
			}
		} else {
			$logbg->debug('WF Cron:: Task '.$taskId.' was skipped due to unsatisfied conditions: '.$entityId);
		}
	}
}
$adb = PearDatabase::getInstance();
require_once 'modules/com_vtiger_workflow/WorkFlowScheduler.php';
$workflowScheduler = new WorkFlowScheduler($adb);
$workflowScheduler->queueScheduledWorkflowTasks();
vtRunTaskJob($adb);
?>
